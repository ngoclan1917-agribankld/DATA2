# python_project_evaluation_app.py - ƒê√É CH·ªàNH S·ª¨A ƒê·ªÇ C·∫¨P NH·∫¨T D·ªÆ LI·ªÜU THI·∫æU

import streamlit as st
import pandas as pd
import numpy as np
import json
from docx import Document
from google import genai
from google.genai.errors import APIError

# --- C·∫•u h√¨nh Trang Streamlit ---
st.set_page_config(
    page_title="App ƒê√°nh gi√° Ph∆∞∆°ng √°n Kinh doanh/ƒê·∫ßu t∆∞",
    layout="wide"
)

# --- Kh·ªüi t·∫°o state chat v√† data ---
if "messages" not in st.session_state:
    st.session_state.messages = []
if "project_data" not in st.session_state:
    st.session_state.project_data = None


# --- Styling cho Header ---
st.markdown(
    """
    <div style="text-align: center;">
        <h1 style="color: #0072b1; font-size: 2.2em; text-transform: uppercase; border-bottom: 2px solid #0072b1; padding-bottom: 10px; margin-bottom: 30px;">
            ·ª®NG D·ª§NG ƒê√ÅNH GI√Å HI·ªÜU QU·∫¢ D·ª∞ √ÅN KINH DOANH üìà
        </h1>
    </div>
    """,
    unsafe_allow_html=True
)

# --- H√†m H·ªó tr·ª£ ---

def read_docx_file(uploaded_file):
    """ƒê·ªçc to√†n b·ªô n·ªôi dung vƒÉn b·∫£n t·ª´ file Word (.docx)."""
    document = Document(uploaded_file)
    full_text = []
    for para in document.paragraphs:
        full_text.append(para.text)
    return '\n'.join(full_text)

# --- Ch·ª©c nƒÉng 1: L·ªçc Th√¥ng tin D·ª± √°n b·∫±ng AI ---
# Gi·ªØ l·∫°i cache_data nh∆∞ng kh√¥ng cache k·∫øt qu·∫£ l·ªói
def extract_project_data(docx_content, api_key):
    """S·ª≠ d·ª•ng Gemini AI ƒë·ªÉ l·ªçc th√¥ng tin t√†i ch√≠nh t·ª´ n·ªôi dung vƒÉn b·∫£n."""
    # Logic AI Extraction ƒë∆∞·ª£c gi·ªØ nguy√™n, ch·ªâ thay ƒë·ªïi c√°ch g·ªçi h√†m
    try:
        client = genai.Client(api_key=api_key)
        model_name = 'gemini-2.5-flash'
        
        prompt = f"""
        B·∫°n l√† m·ªôt chuy√™n gia ph√¢n t√≠ch t√†i ch√≠nh. H√£y tr√≠ch xu·∫•t c√°c th√¥ng tin sau t·ª´ n·ªôi dung Ph∆∞∆°ng √°n Kinh doanh d∆∞·ªõi ƒë√¢y v√† tr·∫£ v·ªÅ K·∫æT QU·∫¢ DUY NH·∫§T d∆∞·ªõi d·∫°ng ƒë·ªëi t∆∞·ª£ng JSON.
        
        N·ªôi dung Ph∆∞∆°ng √°n Kinh doanh:
        ---
        {docx_content}
        ---
        
        C√°c tr∆∞·ªùng b·∫Øt bu·ªôc trong JSON:
        1. V·ªën ƒë·∫ßu t∆∞ (initial_investment): T·ªïng chi ph√≠ ban ƒë·∫ßu (Ch·ªâ l·∫•y s·ªë, kh√¥ng ƒë∆°n v·ªã).
        2. D√≤ng ƒë·ªùi d·ª± √°n (project_life_years): S·ªë nƒÉm ho·∫°t ƒë·ªông (Ch·ªâ l·∫•y s·ªë).
        3. Doanh thu h·∫±ng nƒÉm (annual_revenue): Doanh thu ·ªïn ƒë·ªãnh h√†ng nƒÉm (Ch·ªâ l·∫•y s·ªë, kh√¥ng ƒë∆°n v·ªã).
        4. Chi ph√≠ h·∫±ng nƒÉm (annual_cost): Chi ph√≠ ho·∫°t ƒë·ªông h·∫±ng nƒÉm (Ch·ªâ l·∫•y s·ªë, kh√¥ng ƒë∆°n v·ªã).
        5. WACC (wacc): Chi ph√≠ v·ªën (Ch·ªâ l·∫•y s·ªë th·∫≠p ph√¢n, v√≠ d·ª•: 0.13 cho 13%).
        6. Thu·∫ø su·∫•t (tax_rate): Thu·∫ø su·∫•t TNDN (Ch·ªâ l·∫•y s·ªë th·∫≠p ph√¢n, v√≠ d·ª•: 0.20 cho 20%).

        V√≠ d·ª• ƒë·ªãnh d·∫°ng JSON mong mu·ªën:
        {{
          "initial_investment": 20000000000,
          "project_life_years": 10,
          "annual_revenue": 30000000000,
          "annual_cost": 25000000000,
          "wacc": 0.13,
          "tax_rate": 0.20
        }}
        N·∫øu kh√¥ng t√¨m th·∫•y, h√£y ƒë·∫∑t gi√° tr·ªã l√† 0.
        """

        response = client.models.generate_content(
            model=model_name,
            contents=prompt
        )
        
        json_string = response.text.strip().replace('```json', '').replace('```', '')
        return json.loads(json_string)

    except APIError as e:
        st.error(f"L·ªói g·ªçi Gemini API: Vui l√≤ng ki·ªÉm tra Kh√≥a API ho·∫∑c gi·ªõi h·∫°n s·ª≠ d·ª•ng. Chi ti·∫øt l·ªói: {e}")
        return None
    except json.JSONDecodeError:
        st.error("AI kh√¥ng th·ªÉ tr√≠ch xu·∫•t d·ªØ li·ªáu th√†nh ƒë·ªãnh d·∫°ng JSON h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra n·ªôi dung file Word.")
        return None
    except Exception as e:
        st.error(f"ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh trong qu√° tr√¨nh tr√≠ch xu·∫•t: {e}")
        return None


# --- Ch·ª©c nƒÉng 2 & 3: X√¢y d·ª±ng D√≤ng ti·ªÅn v√† T√≠nh to√°n Ch·ªâ s·ªë ---
# H√†m n√†y gi·ªù nh·∫≠n c√°c gi√° tr·ªã ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n (confirmed data)
def calculate_project_metrics(I0, N, R, C, WACC, Tax):
    """X√¢y d·ª±ng b·∫£ng d√≤ng ti·ªÅn v√† t√≠nh NPV, IRR, PP, DPP t·ª´ d·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n."""
    
    # 1. Ki·ªÉm tra L·ªñI ZERO DIVISION (ƒê√£ ƒë∆∞·ª£c kh·∫Øc ph·ª•c)
    if N <= 0:
        st.error(f"L·ªói logic: D√≤ng ƒë·ªùi d·ª± √°n (N) ph·∫£i l√† s·ªë d∆∞∆°ng. Gi√° tr·ªã hi·ªán t·∫°i l√† {N} nƒÉm.")
        return None, None
    
    # Kh·ªüi t·∫°o b·∫£ng d√≤ng ti·ªÅn
    years = np.arange(0, N + 1)
    df_cashflow = pd.DataFrame(index=years)
    df_cashflow.index.name = 'NƒÉm'
    
    # 2. X√¢y d·ª±ng D√≤ng ti·ªÅn
    Depreciation = I0 / N 
    
    df_cashflow['Doanh thu (R)'] = R
    df_cashflow['Chi ph√≠ (C)'] = C
    df_cashflow.loc[0, ['Doanh thu (R)', 'Chi ph√≠ (C)']] = 0 
    
    df_cashflow['EBIT = R - C'] = df_cashflow['Doanh thu (R)'] - df_cashflow['Chi ph√≠ (C)']
    
    df_cashflow['Kh·∫•u hao'] = Depreciation
    df_cashflow.loc[0, 'Kh·∫•u hao'] = 0
    
    df_cashflow['EBT'] = df_cashflow['EBIT = R - C'] - df_cashflow['Kh·∫•u hao']
    
    df_cashflow['Thu·∫ø TNDN'] = df_cashflow['EBT'].apply(lambda x: x * Tax if x > 0 else 0)
    
    df_cashflow['EAT'] = df_cashflow['EBT'] - df_cashflow['Thu·∫ø TNDN']
    
    df_cashflow['D√≤ng ti·ªÅn Thu·∫ßn (CF)'] = df_cashflow['EAT'] + df_cashflow['Kh·∫•u hao']
    df_cashflow.loc[0, 'D√≤ng ti·ªÅn Thu·∫ßn (CF)'] = -I0 

    # 3. T√≠nh to√°n c√°c Ch·ªâ s·ªë Hi·ªáu qu·∫£
    cf_array = df_cashflow['D√≤ng ti·ªÅn Thu·∫ßn (CF)'].values

    npv_value = np.npv(WACC, cf_array)
    
    try:
        irr_value = np.irr(cf_array)
    except Exception:
        irr_value = np.nan
        
    df_cashflow['CF Chi·∫øt kh·∫•u'] = df_cashflow['D√≤ng ti·ªÅn Thu·∫ßn (CF)'] / ((1 + WACC) ** df_cashflow.index)
    df_cashflow['CF T√≠ch l≈©y'] = df_cashflow['D√≤ng ti·ªÅn Thu·∫ßn (CF)'].cumsum()
    df_cashflow['CF Chi·∫øt kh·∫•u T√≠ch l≈©y'] = df_cashflow['CF Chi·∫øt kh·∫•u'].cumsum()
    
    def calculate_payback(cf_accumulated):
        last_negative_year = cf_accumulated[cf_accumulated < 0].index.max()
        
        if pd.isna(last_negative_year) or last_negative_year == N:
            return float(N) 
        
        year = last_negative_year
        cf_truoc = cf_accumulated.loc[year]
        cf_nam_sau = df_cashflow.loc[year + 1, 'D√≤ng ti·ªÅn Thu·∫ßn (CF)'] if year + 1 <= N else 0
        
        if cf_nam_sau == 0:
            return float(N)
        
        payback = year + (abs(cf_truoc) / cf_nam_sau)
        return payback
    
    pp_value = calculate_payback(df_cashflow['CF T√≠ch l≈©y'])
    dpp_value = calculate_payback(df_cashflow['CF Chi·∫øt kh·∫•u T√≠ch l≈©y'])
    
    metrics = {
        'NPV': npv_value,
        'IRR': irr_value,
        'PP': pp_value,
        'DPP': dpp_value,
        'WACC': WACC # ƒê√£ ƒë∆∞·ª£c x√°c nh·∫≠n
    }
    
    return df_cashflow, metrics


# --- Ch·ª©c nƒÉng 4: Y√™u c·∫ßu AI Ph√¢n t√≠ch Ch·ªâ s·ªë ---

def get_analysis_from_ai(metrics_data, api_key):
    # Logic AI Analysis ƒë∆∞·ª£c gi·ªØ nguy√™n
    try:
        client = genai.Client(api_key=api_key)
        model_name = 'gemini-2.5-flash'
        
        data_markdown = pd.DataFrame(metrics_data.items(), columns=['Ch·ªâ s·ªë', 'Gi√° tr·ªã']).to_markdown(index=False)
        
        prompt = f"""
        B·∫°n l√† m·ªôt chuy√™n gia th·∫©m ƒë·ªãnh d·ª± √°n kinh doanh. D·ª±a tr√™n c√°c ch·ªâ s·ªë hi·ªáu qu·∫£ ƒë·∫ßu t∆∞ sau, h√£y ƒë∆∞a ra m·ªôt nh·∫≠n x√©t chuy√™n s√¢u, kh√°ch quan (kho·∫£ng 3-4 ƒëo·∫°n) v·ªÅ t√≠nh kh·∫£ thi c·ªßa d·ª± √°n.
        
        D·ªØ li·ªáu Ch·ªâ s·ªë Hi·ªáu qu·∫£ ƒê·∫ßu t∆∞:
        {data_markdown}
        WACC (Chi ph√≠ v·ªën) c·ªßa doanh nghi·ªáp l√†: {metrics_data['WACC'] * 100:.2f}%.

        Y√™u c·∫ßu ph√¢n t√≠ch:
        1. ƒê√°nh gi√° t√≠nh kh·∫£ thi t·ªïng th·ªÉ (d·ª±a tr√™n NPV v√† IRR so v·ªõi WACC).
        2. Ph√¢n t√≠ch IRR v√† NPV.
        3. Nh·∫≠n x√©t v·ªÅ r·ªßi ro d·ª±a tr√™n Th·ªùi gian ho√†n v·ªën (PP) v√† Th·ªùi gian ho√†n v·ªën c√≥ chi·∫øt kh·∫•u (DPP).
        """

        response = client.models.generate_content(
            model=model_name,
            contents=prompt
        )
        return response.text

    except APIError as e:
        return f"L·ªói g·ªçi Gemini API: Vui l√≤ng ki·ªÉm tra Kh√≥a API ho·∫∑c gi·ªõi h·∫°n s·ª≠ d·ª•ng. Chi ti·∫øt l·ªói: {e}"
    except Exception as e:
        return f"ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh: {e}"


# =========================================================================
# --- LU·ªíNG CH√çNH C·ª¶A ·ª®NG D·ª§NG ---
# =========================================================================

# --- T·∫£i File v√† L·ªçc D·ªØ li·ªáu (Ch·ª©c nƒÉng 1) ---
st.subheader("1. T·∫£i File Word (.docx) v√† L·ªçc Th√¥ng tin D·ª± √°n")
uploaded_file = st.file_uploader(
    "T·∫£i file Word Ph∆∞∆°ng √°n Kinh doanh/ƒê·∫ßu t∆∞",
    type=['docx']
)

# N√∫t b·∫•m ƒë·ªÉ k√≠ch ho·∫°t t√°c v·ª• l·ªçc AI
if st.button("L·ªåC D·ªÆ LI·ªÜU T√ÄI CH√çNH B·∫∞NG AI üîé", key="btn_ai_extract"):
    if uploaded_file is None:
        st.warning("Vui l√≤ng t·∫£i l√™n file Word tr∆∞·ªõc khi th·ª±c hi·ªán l·ªçc.")
    else:
        api_key = st.secrets.get("GEMINI_API_KEY") 
        if not api_key:
            st.error("L·ªói: Kh√¥ng t√¨m th·∫•y Kh√≥a API 'GEMINI_API_KEY'. Vui l√≤ng c·∫•u h√¨nh trong Streamlit Secrets.")
            st.session_state.project_data = None # X√≥a d·ªØ li·ªáu c≈© n·∫øu l·ªói API
        else:
            docx_content = read_docx_file(uploaded_file)
            st.session_state.project_data = extract_project_data(docx_content, api_key)


# --- KHUNG C·∫¨P NH·∫¨T D·ªÆ LI·ªÜU THI·∫æU/CH·ªàNH S·ª¨A ---
if st.session_state.project_data is not None:
    st.success("‚úÖ D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c tr√≠ch xu·∫•t. Vui l√≤ng ki·ªÉm tra v√† ch·ªânh s·ª≠a n·∫øu c·∫ßn:")
    data = st.session_state.project_data
    
    with st.form("data_update_form"):
        col1, col2 = st.columns(2)
        
        # C·ªôt 1: V·ªën ƒë·∫ßu t∆∞, Doanh thu, Chi ph√≠
        with col1:
            st.markdown("**C√°c gi√° tr·ªã ti·ªÅn t·ªá (VNƒê):**")
            I0 = st.number_input("V·ªën ƒë·∫ßu t∆∞ (I0)", value=float(data.get('initial_investment', 0)), min_value=0.0, step=100000000.0, format='%f')
            R = st.number_input("Doanh thu h·∫±ng nƒÉm (R)", value=float(data.get('annual_revenue', 0)), min_value=0.0, step=100000000.0, format='%f')
            C = st.number_input("Chi ph√≠ h·∫±ng nƒÉm (C)", value=float(data.get('annual_cost', 0)), min_value=0.0, step=100000000.0, format='%f')
            
        # C·ªôt 2: D√≤ng ƒë·ªùi, WACC, Thu·∫ø
        with col2:
            st.markdown("**C√°c gi√° tr·ªã t·ª∑ l·ªá (%)/S·ªë nƒÉm:**")
            N = st.number_input("D√≤ng ƒë·ªùi d·ª± √°n (N)", value=int(data.get('project_life_years', 0)), min_value=1, step=1)
            WACC_percent = st.number_input("WACC (%)", value=float(data.get('wacc', 0.13)) * 100, min_value=0.0, max_value=100.0, step=0.1, format='%.2f')
            Tax_percent = st.number_input("Thu·∫ø su·∫•t TNDN (%)", value=float(data.get('tax_rate', 0.20)) * 100, min_value=0.0, max_value=100.0, step=0.1, format='%.2f')

        # N√∫t x√°c nh·∫≠n
        submitted = st.form_submit_button("X√°c nh·∫≠n v√† B·∫Øt ƒë·∫ßu T√≠nh to√°n")

    # N·∫øu ng∆∞·ªùi d√πng x√°c nh·∫≠n
    if submitted:
        # Chuy·ªÉn ƒë·ªïi v·ªÅ ƒë√∫ng ƒë·ªãnh d·∫°ng
        I0 = float(I0)
        N = int(N)
        R = float(R)
        C = float(C)
        WACC = WACC_percent / 100
        Tax = Tax_percent / 100

        # L∆∞u l·∫°i d·ªØ li·ªáu ƒë√£ x√°c nh·∫≠n ƒë·ªÉ s·ª≠ d·ª•ng
        st.session_state['confirmed_data'] = {
            'I0': I0, 'N': N, 'R': R, 'C': C, 'WACC': WACC, 'Tax': Tax
        }
        
        # B·∫Øt ƒë·∫ßu t√≠nh to√°n
        st.session_state['calculate_triggered'] = True
    else:
        st.session_state['calculate_triggered'] = False


# --- HI·ªÇN TH·ªä K·∫æT QU·∫¢ V√Ä PH√ÇN T√çCH (Ch·ª©c nƒÉng 2, 3, 4) ---
if 'calculate_triggered' in st.session_state and st.session_state['calculate_triggered']:
    
    data_conf = st.session_state['confirmed_data']
    
    df_cashflow, metrics = calculate_project_metrics(
        data_conf['I0'], data_conf['N'], data_conf['R'], data_conf['C'], 
        data_conf['WACC'], data_conf['Tax']
    )

    if df_cashflow is not None and metrics is not None:
        
        st.subheader("2. B·∫£ng D√≤ng ti·ªÅn D·ª± √°n (Cash Flow)")
        cols_to_display = ['Doanh thu (R)', 'Chi ph√≠ (C)', 'EAT', 'Kh·∫•u hao', 'D√≤ng ti·ªÅn Thu·∫ßn (CF)', 'CF Chi·∫øt kh·∫•u']
        st.dataframe(df_cashflow[cols_to_display].style.format('{:,.0f}'), use_container_width=True)
        
        # --- Ch·ª©c nƒÉng 3: T√≠nh Ch·ªâ s·ªë ---
        st.subheader("3. C√°c Ch·ªâ s·ªë ƒê√°nh gi√° Hi·ªáu qu·∫£ D·ª± √°n")
        
        # C·∫≠p nh·∫≠t WACC cho hi·ªÉn th·ªã v√† ph√¢n t√≠ch
        WACC_val = data_conf['WACC']
        N_val = data_conf['N']
        
        metrics_display = {
            'NPV (Gi√° tr·ªã hi·ªán t·∫°i r√≤ng)': f"{metrics['NPV']:,.0f} VNƒê",
            'IRR (T·ª∑ su·∫•t sinh l·ªùi n·ªôi b·ªô)': f"{metrics['IRR'] * 100:.2f}%" if not np.isnan(metrics['IRR']) else "Kh√¥ng t√≠nh ƒë∆∞·ª£c",
            'PP (Th·ªùi gian ho√†n v·ªën)': f"{metrics['PP']:.2f} nƒÉm" if metrics['PP'] < N_val else f"{N_val} nƒÉm (Kh√¥ng ho√†n v·ªën k·ªãp)",
            'DPP (Th·ªùi gian ho√†n v·ªën c√≥ chi·∫øt kh·∫•u)': f"{metrics['DPP']:.2f} nƒÉm" if metrics['DPP'] < N_val else f"{N_val} nƒÉm (Kh√¥ng ho√†n v·ªën k·ªãp)"
        }
        
        col_met1, col_met2, col_met3, col_met4 = st.columns(4)
        with col_met1: st.metric(list(metrics_display.keys())[0], list(metrics_display.values())[0], delta="> 0 (Kh·∫£ thi)" if metrics['NPV'] > 0 else "< 0 (Kh√¥ng kh·∫£ thi)")
        with col_met2: st.metric(list(metrics_display.keys())[1], list(metrics_display.values())[1], delta=f"L·ªõn h∆°n WACC ({WACC_val * 100:.2f}%)" if metrics['IRR'] > WACC_val else f"Nh·ªè h∆°n WACC ({WACC_val * 100:.2f}%)")
        with col_met3: st.metric(list(metrics_display.keys())[2], list(metrics_display.values())[2])
        with col_met4: st.metric(list(metrics_display.keys())[3], list(metrics_display.values())[3])

        
        # --- Ch·ª©c nƒÉng 4: Y√™u c·∫ßu AI Ph√¢n t√≠ch ---
        st.subheader("4. Y√™u c·∫ßu AI Ph√¢n t√≠ch Ch·ªâ s·ªë Hi·ªáu qu·∫£")
        
        if st.button("PH√ÇN T√çCH CHUY√äN S√ÇU B·∫∞NG GEMINI AI ü§ñ", key="btn_ai_analyze"):
            api_key = st.secrets.get("GEMINI_API_KEY") 
            if api_key:
                with st.spinner('ƒêang g·ª≠i d·ªØ li·ªáu v√† ch·ªù Gemini th·∫©m ƒë·ªãnh...'):
                    ai_result = get_analysis_from_ai(metrics, api_key)
                    st.markdown("**K·∫øt qu·∫£ Ph√¢n t√≠ch c·ªßa Chuy√™n gia AI:**")
                    st.info(ai_result)
            else:
                 st.error("L·ªói: Kh√¥ng t√¨m th·∫•y Kh√≥a API. Vui l√≤ng c·∫•u h√¨nh Kh√≥a 'GEMINI_API_KEY' trong Streamlit Secrets.")

elif uploaded_file is None:
    st.info("·ª®ng d·ª•ng ƒëang ch·ªù b·∫°n t·∫£i file Ph∆∞∆°ng √°n Kinh doanh (.docx) ƒë·ªÉ b·∫Øt ƒë·∫ßu qu√° tr√¨nh ƒë√°nh gi√°.")
