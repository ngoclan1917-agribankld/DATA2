# python_project_evaluation_app.py

import streamlit as st
import pandas as pd
import numpy as np
import json
from docx import Document
from google import genai
from google.genai.errors import APIError

# --- C·∫•u h√¨nh Trang Streamlit ---
st.set_page_config(
    page_title="App ƒê√°nh gi√° Ph∆∞∆°ng √°n Kinh doanh/ƒê·∫ßu t∆∞",
    layout="wide"
)

# --- Kh·ªüi t·∫°o state chat cho Ch·ª©c nƒÉng 4 (Ch·ª©c nƒÉng m·ªõi theo y√™u c·∫ßu c≈©) ---
if "messages" not in st.session_state:
    st.session_state.messages = []

# --- Styling cho Header ---
st.markdown(
    """
    <div style="text-align: center;">
        <h1 style="color: #0072b1; font-size: 2.2em; text-transform: uppercase; border-bottom: 2px solid #0072b1; padding-bottom: 10px; margin-bottom: 30px;">
            ·ª®NG D·ª§NG ƒê√ÅNH GI√Å HI·ªÜU QU·∫¢ D·ª∞ √ÅN KINH DOANH üìà
        </h1>
    </div>
    """,
    unsafe_allow_html=True
)

# --- H√†m H·ªó tr·ª£ ---

def read_docx_file(uploaded_file):
    """ƒê·ªçc to√†n b·ªô n·ªôi dung vƒÉn b·∫£n t·ª´ file Word (.docx)."""
    document = Document(uploaded_file)
    full_text = []
    for para in document.paragraphs:
        full_text.append(para.text)
    return '\n'.join(full_text)

# --- Ch·ª©c nƒÉng 1: L·ªçc Th√¥ng tin D·ª± √°n b·∫±ng AI ---
@st.cache_data(show_spinner="ƒêang tr√≠ch xu·∫•t d·ªØ li·ªáu t·ª´ file Word...")
def extract_project_data(docx_content, api_key):
    """S·ª≠ d·ª•ng Gemini AI ƒë·ªÉ l·ªçc th√¥ng tin t√†i ch√≠nh t·ª´ n·ªôi dung vƒÉn b·∫£n."""
    try:
        client = genai.Client(api_key=api_key)
        model_name = 'gemini-2.5-flash'
        
        # Y√™u c·∫ßu AI tr√≠ch xu·∫•t th√¥ng tin v√†o ƒë·ªãnh d·∫°ng JSON
        prompt = f"""
        B·∫°n l√† m·ªôt chuy√™n gia ph√¢n t√≠ch t√†i ch√≠nh. H√£y tr√≠ch xu·∫•t c√°c th√¥ng tin sau t·ª´ n·ªôi dung Ph∆∞∆°ng √°n Kinh doanh d∆∞·ªõi ƒë√¢y v√† tr·∫£ v·ªÅ K·∫æT QU·∫¢ DUY NH·∫§T d∆∞·ªõi d·∫°ng ƒë·ªëi t∆∞·ª£ng JSON.

        N·ªôi dung Ph∆∞∆°ng √°n Kinh doanh:
        ---
        {docx_content}
        ---

        C√°c tr∆∞·ªùng b·∫Øt bu·ªôc trong JSON:
        1. V·ªën ƒë·∫ßu t∆∞ (initial_investment): T·ªïng chi ph√≠ ban ƒë·∫ßu (Ch·ªâ l·∫•y s·ªë, kh√¥ng ƒë∆°n v·ªã).
        2. D√≤ng ƒë·ªùi d·ª± √°n (project_life_years): S·ªë nƒÉm ho·∫°t ƒë·ªông (Ch·ªâ l·∫•y s·ªë).
        3. Doanh thu h·∫±ng nƒÉm (annual_revenue): Doanh thu ·ªïn ƒë·ªãnh h√†ng nƒÉm (Ch·ªâ l·∫•y s·ªë, kh√¥ng ƒë∆°n v·ªã).
        4. Chi ph√≠ h·∫±ng nƒÉm (annual_cost): Chi ph√≠ ho·∫°t ƒë·ªông h·∫±ng nƒÉm (Ch·ªâ l·∫•y s·ªë, kh√¥ng ƒë∆°n v·ªã).
        5. WACC (wacc): Chi ph√≠ v·ªën (Ch·ªâ l·∫•y s·ªë th·∫≠p ph√¢n, v√≠ d·ª•: 0.13 cho 13%).
        6. Thu·∫ø su·∫•t (tax_rate): Thu·∫ø su·∫•t TNDN (Ch·ªâ l·∫•y s·ªë th·∫≠p ph√¢n, v√≠ d·ª•: 0.20 cho 20%).

        V√≠ d·ª• ƒë·ªãnh d·∫°ng JSON mong mu·ªën:
        {{
          "initial_investment": 20000000000,
          "project_life_years": 10,
          "annual_revenue": 30000000000,
          "annual_cost": 25000000000,
          "wacc": 0.13,
          "tax_rate": 0.20
        }}
        N·∫øu kh√¥ng t√¨m th·∫•y, h√£y ƒë·∫∑t gi√° tr·ªã l√† 0.
        """

        response = client.models.generate_content(
            model=model_name,
            contents=prompt
        )
        
        # X·ª≠ l√Ω ƒë·ªÉ ƒë·∫£m b·∫£o output l√† JSON h·ª£p l·ªá
        json_string = response.text.strip().replace('```json', '').replace('```', '')
        return json.loads(json_string)

    except APIError as e:
        st.error(f"L·ªói g·ªçi Gemini API: Vui l√≤ng ki·ªÉm tra Kh√≥a API ho·∫∑c gi·ªõi h·∫°n s·ª≠ d·ª•ng. Chi ti·∫øt l·ªói: {e}")
        return None
    except json.JSONDecodeError:
        st.error("AI kh√¥ng th·ªÉ tr√≠ch xu·∫•t d·ªØ li·ªáu th√†nh ƒë·ªãnh d·∫°ng JSON h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra n·ªôi dung file Word.")
        return None
    except Exception as e:
        st.error(f"ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh trong qu√° tr√¨nh tr√≠ch xu·∫•t: {e}")
        return None


# --- Ch·ª©c nƒÉng 2 & 3: X√¢y d·ª±ng D√≤ng ti·ªÅn v√† T√≠nh to√°n Ch·ªâ s·ªë ---

def calculate_project_metrics(data):
    """X√¢y d·ª±ng b·∫£ng d√≤ng ti·ªÅn v√† t√≠nh NPV, IRR, PP, DPP."""
    
    # 1. Tr√≠ch xu·∫•t th√¥ng s·ªë
    try:
        I0 = float(data['initial_investment'])
        N = int(data['project_life_years'])
        R = float(data['annual_revenue'])
        C = float(data['annual_cost'])
        WACC = float(data['wacc'])
        Tax = float(data['tax_rate'])
    except Exception:
        st.error("D·ªØ li·ªáu tr√≠ch xu·∫•t kh√¥ng h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra c√°c gi√° tr·ªã.")
        return None, None, None

    # Kh·ªüi t·∫°o b·∫£ng d√≤ng ti·ªÅn
    years = np.arange(0, N + 1)
    df_cashflow = pd.DataFrame(index=years)
    df_cashflow.index.name = 'NƒÉm'
    
    # 2. X√¢y d·ª±ng D√≤ng ti·ªÅn
    
    # Gi·∫£ ƒë·ªãnh: V·ªën ƒë·∫ßu t∆∞ (I0) ph√°t sinh ·ªü NƒÉm 0. D√≤ng ti·ªÅn d∆∞∆°ng (R, C) b·∫Øt ƒë·∫ßu t·ª´ NƒÉm 1.
    
    # Kh·∫•u hao (Gi·∫£ ƒë·ªãnh tuy·∫øn t√≠nh)
    Depreciation = I0 / N
    
    # T√≠nh to√°n t·ª´ng nƒÉm
    df_cashflow['Doanh thu (R)'] = R
    df_cashflow['Chi ph√≠ (C)'] = C
    df_cashflow.loc[0, ['Doanh thu (R)', 'Chi ph√≠ (C)']] = 0 # NƒÉm 0 kh√¥ng c√≥ ho·∫°t ƒë·ªông
    
    # L√£i su·∫•t tr∆∞·ªõc thu·∫ø (EBIT)
    df_cashflow['EBIT = R - C'] = df_cashflow['Doanh thu (R)'] - df_cashflow['Chi ph√≠ (C)']
    
    # L·ªó nƒÉm 1 (n·∫øu c√≥) ƒë∆∞·ª£c k·∫øt chuy·ªÉn sang nƒÉm 2 ƒë·ªÉ t√≠nh thu·∫ø (ƒê∆°n gi·∫£n h√≥a: b·ªè qua k·∫øt chuy·ªÉn l·ªó)
    df_cashflow['Kh·∫•u hao'] = Depreciation
    df_cashflow.loc[0, 'Kh·∫•u hao'] = 0
    
    # L·ª£i nhu·∫≠n tr∆∞·ªõc thu·∫ø (EBT = EBIT - Kh·∫•u hao)
    df_cashflow['EBT'] = df_cashflow['EBIT = R - C'] - df_cashflow['Kh·∫•u hao']
    
    # Thu·∫ø TNDN
    df_cashflow['Thu·∫ø TNDN'] = df_cashflow['EBT'].apply(lambda x: x * Tax if x > 0 else 0)
    
    # L·ª£i nhu·∫≠n sau thu·∫ø (EAT)
    df_cashflow['EAT'] = df_cashflow['EBT'] - df_cashflow['Thu·∫ø TNDN']
    
    # D√≤ng ti·ªÅn Thu·∫ßn (CF = EAT + Kh·∫•u hao - ƒê·∫ßu t∆∞)
    df_cashflow['D√≤ng ti·ªÅn Thu·∫ßn (CF)'] = df_cashflow['EAT'] + df_cashflow['Kh·∫•u hao']
    df_cashflow.loc[0, 'D√≤ng ti·ªÅn Thu·∫ßn (CF)'] = -I0 # V·ªën ƒë·∫ßu t∆∞ ban ƒë·∫ßu

    # 3. T√≠nh to√°n c√°c Ch·ªâ s·ªë Hi·ªáu qu·∫£

    cf_array = df_cashflow['D√≤ng ti·ªÅn Thu·∫ßn (CF)'].values

    # a. NPV
    npv_value = np.npv(WACC, cf_array)

    # b. IRR (S·ª≠ d·ª•ng numpy)
    try:
        irr_value = np.irr(cf_array)
    except Exception:
        irr_value = np.nan
        
    # c. PP (Th·ªùi gian ho√†n v·ªën) & DPP (Th·ªùi gian ho√†n v·ªën c√≥ chi·∫øt kh·∫•u)
    
    # D√≤ng ti·ªÅn t√≠ch l≈©y v√† d√≤ng ti·ªÅn chi·∫øt kh·∫•u
    df_cashflow['CF Chi·∫øt kh·∫•u'] = df_cashflow['D√≤ng ti·ªÅn Thu·∫ßn (CF)'] / ((1 + WACC) ** df_cashflow.index)
    df_cashflow['CF T√≠ch l≈©y'] = df_cashflow['D√≤ng ti·ªÅn Thu·∫ßn (CF)'].cumsum()
    df_cashflow['CF Chi·∫øt kh·∫•u T√≠ch l≈©y'] = df_cashflow['CF Chi·∫øt kh·∫•u'].cumsum()
    
    # T√≠nh PP v√† DPP
    def calculate_payback(cf_accumulated):
        # T√¨m nƒÉm cu·ªëi c√πng m√† CF t√≠ch l≈©y l√† √¢m
        last_negative_year = cf_accumulated[cf_accumulated < 0].index.max()
        if pd.isna(last_negative_year) or last_negative_year == N:
            return N # Kh√¥ng ho√†n v·ªën trong th·ªùi gian d·ª± √°n
        
        year = last_negative_year
        # CF_tr∆∞·ªõc = Gi√° tr·ªã √¢m cu·ªëi c√πng
        cf_truoc = cf_accumulated.loc[year]
        # CF_nƒÉm_sau = D√≤ng ti·ªÅn thu·∫ßn c·ªßa nƒÉm ngay sau ƒë√≥
        cf_nam_sau = df_cashflow.loc[year + 1, 'D√≤ng ti·ªÅn Thu·∫ßn (CF)'] if year + 1 <= N else 0
        
        # C√¥ng th·ª©c: PP = NƒÉm_tr∆∞·ªõc + |CF_t√≠ch_l≈©y_√¢m_tr∆∞·ªõc| / CF_nƒÉm_sau
        payback = year + (abs(cf_truoc) / cf_nam_sau)
        return payback
    
    pp_value = calculate_payback(df_cashflow['CF T√≠ch l≈©y'])
    dpp_value = calculate_payback(df_cashflow['CF Chi·∫øt kh·∫•u T√≠ch l≈©y'])
    
    metrics = {
        'NPV': npv_value,
        'IRR': irr_value,
        'PP': pp_value,
        'DPP': dpp_value
    }
    
    return df_cashflow, metrics


# --- Ch·ª©c nƒÉng 4: Y√™u c·∫ßu AI Ph√¢n t√≠ch Ch·ªâ s·ªë ---

def get_analysis_from_ai(metrics_data, api_key):
    """G·ª≠i c√°c ch·ªâ s·ªë hi·ªáu qu·∫£ d·ª± √°n cho Gemini AI ƒë·ªÉ ph√¢n t√≠ch."""
    try:
        client = genai.Client(api_key=api_key)
        model_name = 'gemini-2.5-flash'
        
        data_markdown = pd.DataFrame(metrics_data.items(), columns=['Ch·ªâ s·ªë', 'Gi√° tr·ªã']).to_markdown(index=False)
        
        prompt = f"""
        B·∫°n l√† m·ªôt chuy√™n gia th·∫©m ƒë·ªãnh d·ª± √°n kinh doanh. D·ª±a tr√™n c√°c ch·ªâ s·ªë hi·ªáu qu·∫£ ƒë·∫ßu t∆∞ sau, h√£y ƒë∆∞a ra m·ªôt nh·∫≠n x√©t chuy√™n s√¢u, kh√°ch quan (kho·∫£ng 3-4 ƒëo·∫°n) v·ªÅ t√≠nh kh·∫£ thi c·ªßa d·ª± √°n.
        
        D·ªØ li·ªáu Ch·ªâ s·ªë Hi·ªáu qu·∫£ ƒê·∫ßu t∆∞:
        {data_markdown}
        WACC (Chi ph√≠ v·ªën) c·ªßa doanh nghi·ªáp l√†: {metrics_data['WACC'] * 100:.2f}%.

        Y√™u c·∫ßu ph√¢n t√≠ch:
        1. ƒê√°nh gi√° t√≠nh kh·∫£ thi t·ªïng th·ªÉ (d·ª±a tr√™n NPV v√† IRR so v·ªõi WACC).
        2. Ph√¢n t√≠ch IRR v√† NPV.
        3. Nh·∫≠n x√©t v·ªÅ r·ªßi ro d·ª±a tr√™n Th·ªùi gian ho√†n v·ªën (PP) v√† Th·ªùi gian ho√†n v·ªën c√≥ chi·∫øt kh·∫•u (DPP).
        """

        response = client.models.generate_content(
            model=model_name,
            contents=prompt
        )
        return response.text

    except APIError as e:
        return f"L·ªói g·ªçi Gemini API: Vui l√≤ng ki·ªÉm tra Kh√≥a API ho·∫∑c gi·ªõi h·∫°n s·ª≠ d·ª•ng. Chi ti·∫øt l·ªói: {e}"
    except Exception as e:
        return f"ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh: {e}"


# =========================================================================
# --- LU·ªíNG CH√çNH C·ª¶A ·ª®NG D·ª§NG ---
# =========================================================================

# --- T·∫£i File v√† L·ªçc D·ªØ li·ªáu (Ch·ª©c nƒÉng 1) ---
st.subheader("1. T·∫£i File Word (.docx) v√† L·ªçc Th√¥ng tin D·ª± √°n")
uploaded_file = st.file_uploader(
    "T·∫£i file Word Ph∆∞∆°ng √°n Kinh doanh/ƒê·∫ßu t∆∞ (ch·ª©a V·ªën ƒë·∫ßu t∆∞, D√≤ng ƒë·ªùi, Doanh thu, Chi ph√≠, WACC, Thu·∫ø)",
    type=['docx']
)

if uploaded_file is not None:
    
    # N√∫t b·∫•m ƒë·ªÉ k√≠ch ho·∫°t t√°c v·ª• l·ªçc AI
    if st.button("L·ªåC D·ªÆ LI·ªÜU T√ÄI CH√çNH B·∫∞NG AI üîé"):
        api_key = st.secrets.get("GEMINI_API_KEY") 
        if not api_key:
            st.error("L·ªói: Kh√¥ng t√¨m th·∫•y Kh√≥a API 'GEMINI_API_KEY'. Vui l√≤ng c·∫•u h√¨nh trong Streamlit Secrets.")
            st.stop()
            
        docx_content = read_docx_file(uploaded_file)
        
        # L·ªçc d·ªØ li·ªáu
        st.session_state['project_data'] = extract_project_data(docx_content, api_key)

    # Hi·ªÉn th·ªã d·ªØ li·ªáu ƒë√£ l·ªçc n·∫øu c√≥
    if 'project_data' in st.session_state and st.session_state['project_data']:
        data = st.session_state['project_data']
        
        st.success("‚úÖ D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c tr√≠ch xu·∫•t th√†nh c√¥ng:")
        col1, col2 = st.columns(2)
        
        # Hi·ªÉn th·ªã d∆∞·ªõi d·∫°ng b·∫£ng ƒë∆°n gi·∫£n
        display_data = {
            "V·ªën ƒë·∫ßu t∆∞ (I0)": f"{data['initial_investment']:,.0f} VNƒê",
            "D√≤ng ƒë·ªùi d·ª± √°n (N)": f"{data['project_life_years']} nƒÉm",
            "Doanh thu/nƒÉm (R)": f"{data['annual_revenue']:,.0f} VNƒê",
            "Chi ph√≠/nƒÉm (C)": f"{data['annual_cost']:,.0f} VNƒê",
            "WACC (k)": f"{data['wacc'] * 100:.2f}%",
            "Thu·∫ø su·∫•t (T)": f"{data['tax_rate'] * 100:.2f}%"
        }
        
        with col1:
            st.dataframe(pd.DataFrame(list(display_data.items())[:3], columns=['Ch·ªâ ti√™u', 'Gi√° tr·ªã']), hide_index=True)
        with col2:
             st.dataframe(pd.DataFrame(list(display_data.items())[3:], columns=['Ch·ªâ ti√™u', 'Gi√° tr·ªã']), hide_index=True)


        # --- X√¢y d·ª±ng D√≤ng ti·ªÅn & T√≠nh Ch·ªâ s·ªë (Ch·ª©c nƒÉng 2 & 3) ---
        
        df_cashflow, metrics = calculate_project_metrics(data)

        if df_cashflow is not None:
            
            st.subheader("2. B·∫£ng D√≤ng ti·ªÅn D·ª± √°n (Cash Flow)")
            st.dataframe(df_cashflow.style.format('{:,.0f}'), use_container_width=True)
            
            st.subheader("3. C√°c Ch·ªâ s·ªë ƒê√°nh gi√° Hi·ªáu qu·∫£ D·ª± √°n")
            
            # Chu·∫©n b·ªã d·ªØ li·ªáu hi·ªÉn th·ªã cho metrics
            metrics_display = {
                'NPV (Gi√° tr·ªã hi·ªán t·∫°i r√≤ng)': f"{metrics['NPV']:,.0f} VNƒê",
                'IRR (T·ª∑ su·∫•t sinh l·ªùi n·ªôi b·ªô)': f"{metrics['IRR'] * 100:.2f}%" if metrics['IRR'] not in [np.nan, np.inf, -np.inf] else "Kh√¥ng t√≠nh ƒë∆∞·ª£c",
                'PP (Th·ªùi gian ho√†n v·ªën)': f"{metrics['PP']:.2f} nƒÉm",
                'DPP (Th·ªùi gian ho√†n v·ªën c√≥ chi·∫øt kh·∫•u)': f"{metrics['DPP']:.2f} nƒÉm"
            }
            
            # Th√™m WACC v√†o metrics ƒë·ªÉ AI ph√¢n t√≠ch
            metrics['WACC'] = data['wacc']

            col_met1, col_met2, col_met3, col_met4 = st.columns(4)
            with col_met1: st.metric(list(metrics_display.keys())[0], list(metrics_display.values())[0], delta="> 0 (Kh·∫£ thi)" if metrics['NPV'] > 0 else "< 0 (Kh√¥ng kh·∫£ thi)")
            with col_met2: st.metric(list(metrics_display.keys())[1], list(metrics_display.values())[1], delta=f"L·ªõn h∆°n WACC ({metrics['WACC'] * 100:.2f}%)" if metrics['IRR'] > metrics['WACC'] else f"Nh·ªè h∆°n WACC ({metrics['WACC'] * 100:.2f}%)")
            with col_met3: st.metric(list(metrics_display.keys())[2], list(metrics_display.values())[2])
            with col_met4: st.metric(list(metrics_display.keys())[3], list(metrics_display.values())[3])

            
            # --- Y√™u c·∫ßu AI Ph√¢n t√≠ch (Ch·ª©c nƒÉng 4) ---
            st.subheader("4. Y√™u c·∫ßu AI Ph√¢n t√≠ch Ch·ªâ s·ªë Hi·ªáu qu·∫£")
            
            if st.button("PH√ÇN T√çCH CHUY√äN S√ÇU B·∫∞NG GEMINI AI ü§ñ"):
                if api_key:
                    with st.spinner('ƒêang g·ª≠i d·ªØ li·ªáu v√† ch·ªù Gemini th·∫©m ƒë·ªãnh...'):
                        ai_result = get_analysis_from_ai(metrics, api_key)
                        st.markdown("**K·∫øt qu·∫£ Ph√¢n t√≠ch c·ªßa Chuy√™n gia AI:**")
                        st.info(ai_result)
                else:
                     st.error("L·ªói: Kh√¥ng t√¨m th·∫•y Kh√≥a API. Vui l√≤ng c·∫•u h√¨nh Kh√≥a 'GEMINI_API_KEY' trong Streamlit Secrets.")

else:
    st.info("·ª®ng d·ª•ng ƒëang ch·ªù b·∫°n t·∫£i file Ph∆∞∆°ng √°n Kinh doanh (.docx) ƒë·ªÉ b·∫Øt ƒë·∫ßu qu√° tr√¨nh ƒë√°nh gi√°.")
